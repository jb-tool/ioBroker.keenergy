{"id":"KVbr","dependencies":[{"name":"/home/joshua/Projects/iobroker.keenergy/node_modules/@sentry/types/esm/transaction.js.map","includedInParent":true,"mtime":1640968286860},{"name":"/home/joshua/Projects/iobroker.keenergy/package.json","includedInParent":true,"mtime":1640968282582},{"name":"/home/joshua/Projects/iobroker.keenergy/node_modules/@sentry/types/package.json","includedInParent":true,"mtime":1640968286860}],"generated":{"js":"\"use strict\";var e;Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.TransactionSamplingMethod=void 0,exports.TransactionSamplingMethod=e,function(e){e.Explicit=\"explicitly_set\",e.Sampler=\"client_sampler\",e.Rate=\"client_rate\",e.Inheritance=\"inheritance\"}(e||(exports.TransactionSamplingMethod=e={}));"},"sourceMaps":{"js":{"mappings":[{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":0},"generated":{"line":1,"column":0}},{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":0},"generated":{"line":1,"column":13}},{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":12},"generated":{"line":1,"column":17}},{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":0},"generated":{"line":1,"column":19}},{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":0},"generated":{"line":1,"column":26}},{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":0},"generated":{"line":1,"column":41}},{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":0},"generated":{"line":1,"column":49}},{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":0},"generated":{"line":1,"column":62}},{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":0},"generated":{"line":1,"column":63}},{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":0},"generated":{"line":1,"column":70}},{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":0},"generated":{"line":1,"column":74}},{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":0},"generated":{"line":1,"column":82}},{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":0},"generated":{"line":1,"column":113}},{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":0},"generated":{"line":1,"column":115}},{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":0},"generated":{"line":1,"column":123}},{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":0},"generated":{"line":1,"column":149}},{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":0},"generated":{"line":1,"column":151}},{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":12},"generated":{"line":1,"column":160}},{"source":"../src/transaction.ts","name":null,"original":{"line":121,"column":2},"generated":{"line":1,"column":163}},{"source":"../src/transaction.ts","name":null,"original":{"line":121,"column":2},"generated":{"line":1,"column":165}},{"source":"../src/transaction.ts","name":null,"original":{"line":121,"column":2},"generated":{"line":1,"column":174}},{"source":"../src/transaction.ts","name":null,"original":{"line":122,"column":2},"generated":{"line":1,"column":191}},{"source":"../src/transaction.ts","name":null,"original":{"line":122,"column":2},"generated":{"line":1,"column":193}},{"source":"../src/transaction.ts","name":null,"original":{"line":122,"column":2},"generated":{"line":1,"column":201}},{"source":"../src/transaction.ts","name":null,"original":{"line":123,"column":2},"generated":{"line":1,"column":218}},{"source":"../src/transaction.ts","name":null,"original":{"line":123,"column":2},"generated":{"line":1,"column":220}},{"source":"../src/transaction.ts","name":null,"original":{"line":123,"column":2},"generated":{"line":1,"column":225}},{"source":"../src/transaction.ts","name":null,"original":{"line":124,"column":2},"generated":{"line":1,"column":239}},{"source":"../src/transaction.ts","name":null,"original":{"line":124,"column":2},"generated":{"line":1,"column":241}},{"source":"../src/transaction.ts","name":null,"original":{"line":124,"column":2},"generated":{"line":1,"column":253}},{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":0},"generated":{"line":1,"column":267}},{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":12},"generated":{"line":1,"column":268}},{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":12},"generated":{"line":1,"column":272}},{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":12},"generated":{"line":1,"column":280}},{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":12},"generated":{"line":1,"column":306}},{"source":"../src/transaction.ts","name":null,"original":{"line":120,"column":37},"generated":{"line":1,"column":308}}],"sources":{"../src/transaction.ts":"import { ExtractedNodeRequestData, Primitive, WorkerLocation } from './misc';\nimport { Span, SpanContext } from './span';\n\n/**\n * Interface holding Transaction-specific properties\n */\nexport interface TransactionContext extends SpanContext {\n  /**\n   * Human-readable identifier for the transaction\n   */\n  name: string;\n\n  /**\n   * If true, sets the end timestamp of the transaction to the highest timestamp of child spans, trimming\n   * the duration of the transaction. This is useful to discard extra time in the transaction that is not\n   * accounted for in child spans, like what happens in the idle transaction Tracing integration, where we finish the\n   * transaction after a given \"idle time\" and we don't want this \"idle time\" to be part of the transaction.\n   */\n  trimEnd?: boolean;\n\n  /**\n   * If this transaction has a parent, the parent's sampling decision\n   */\n  parentSampled?: boolean;\n\n  /**\n   * Metadata associated with the transaction, for internal SDK use.\n   */\n  metadata?: TransactionMetadata;\n}\n\n/**\n * Data pulled from a `sentry-trace` header\n */\nexport type TraceparentData = Pick<TransactionContext, 'traceId' | 'parentSpanId' | 'parentSampled'>;\n\n/**\n * Transaction \"Class\", inherits Span only has `setName`\n */\nexport interface Transaction extends TransactionContext, Span {\n  /**\n   * @inheritDoc\n   */\n  spanId: string;\n\n  /**\n   * @inheritDoc\n   */\n  traceId: string;\n\n  /**\n   * @inheritDoc\n   */\n  startTimestamp: number;\n\n  /**\n   * @inheritDoc\n   */\n  tags: { [key: string]: Primitive };\n\n  /**\n   * @inheritDoc\n   */\n  data: { [key: string]: any };\n\n  /**\n   * Metadata about the transaction\n   */\n  metadata: TransactionMetadata;\n\n  /**\n   * Set the name of the transaction\n   */\n  setName(name: string): void;\n\n  /** Returns the current transaction properties as a `TransactionContext` */\n  toContext(): TransactionContext;\n\n  /** Updates the current transaction with a new `TransactionContext` */\n  updateWithContext(transactionContext: TransactionContext): this;\n}\n\n/**\n * Context data passed by the user when starting a transaction, to be used by the tracesSampler method.\n */\nexport interface CustomSamplingContext {\n  [key: string]: any;\n}\n\n/**\n * Data passed to the `tracesSampler` function, which forms the basis for whatever decisions it might make.\n *\n * Adds default data to data provided by the user. See {@link Hub.startTransaction}\n */\nexport interface SamplingContext extends CustomSamplingContext {\n  /**\n   * Context data with which transaction being sampled was created\n   */\n  transactionContext: TransactionContext;\n\n  /**\n   * Sampling decision from the parent transaction, if any.\n   */\n  parentSampled?: boolean;\n\n  /**\n   * Object representing the URL of the current page or worker script. Passed by default when using the `BrowserTracing`\n   * integration.\n   */\n  location?: WorkerLocation;\n\n  /**\n   * Object representing the incoming request to a node server. Passed by default when using the TracingHandler.\n   */\n  request?: ExtractedNodeRequestData;\n}\n\nexport type Measurements = Record<string, { value: number }>;\n\nexport enum TransactionSamplingMethod {\n  Explicit = 'explicitly_set',\n  Sampler = 'client_sampler',\n  Rate = 'client_rate',\n  Inheritance = 'inheritance',\n}\n\nexport interface TransactionMetadata {\n  transactionSampling?: { rate?: number; method?: string };\n\n  /** The two halves (sentry and third-party) of a transaction's tracestate header, used for dynamic sampling */\n  tracestate?: {\n    sentry?: string;\n    thirdparty?: string;\n  };\n\n  /** For transactions tracing server-side request handling, the path of the request being tracked. */\n  requestPath?: string;\n}\n"},"lineCount":null}},"error":null,"hash":"a4b86833d49c7e5c686cae85de3ff5ba","cacheData":{"env":{}}}